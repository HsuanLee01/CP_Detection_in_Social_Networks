library(remstats) # the formula for REH
library(relevent) # fit REH to REM
set.seed(9252568)
setwd(paste("C:/Users/HsuanLee/Desktop/Methodology and Statistics/",
"Changepoints Inference in Relational Event Data of a Social Network/",
"Changepoint-Inference-in-REH-of-a-Social-Network", sep = ""))
formula <- ~ 1 + remstats::send("z", covar) + # Exogenous statistics
remstats::difference("z", covar) + # Exogenous statistics
remstats::inertia(scaling = "std") + # Endogenous statistics
remstats::outdegreeSender(scaling='std') # Endogenous statistics
# set up the covariates
covar <- data.frame(id = 1:30, time = 0, z = rnorm(n = 30))
REH_NCP <- readRDS("Data/REH_NCP.RDS")
# compute the statistics
out.ncp <- remstats(tie_effects = formula, edgelist = REH_NCP)
stat.ncp <- out.ncp[["statistics"]] # extract the statistics from the list
# maximum time point of the REH
tau <- max(REH_NCP$time)
# specify the length of the window
windows_ncp <- REHdynamics::createwindows(1000, tau)
# fit to the REM model
model_fixwin_ncp <- REHdynamics::MWrem(windows_ncp, edgelist = REH_NCP,
stats = stat.ncp,
actors = covar$id, directed = TRUE,
method = "MLE", model = "tie", ncores = 2)
# extract the parameters
fixmw_send_ncp_param <- 1
for (i in 1:length(model_fixwin_ncp)) {
fixmw_send_ncp_param[i] <- model_fixwin_ncp[[i]][["coefficients"]][["send.z"]]
}
plot(fixmw_send_ncp_param, type = "point") # plot the movement of parameter
# extract the parameters
fixmw_diff_ncp_param <- 1
for (i in 1:length(model_fixwin_ncp)) {
fixmw_diff_ncp_param[i] <- model_fixwin_ncp[[i]][["coefficients"]][["difference.z"]]
}
plot(fixmw_diff_ncp_param, type = "point") # plot the movement of parameter
# extract the parameters
fixmw_ine_ncp_param <- 1
for (i in 1:length(model_fixwin_ncp)) {
fixmw_ine_ncp_param[i] <- model_fixwin_ncp[[i]][["coefficients"]][["inertia"]]
}
plot(fixmw_ine_ncp_param, type = "point") # plot the movement of parameter
# extract the parameters
fixmw_out_ncp_param <- 1
for (i in 1:length(model_fixwin_ncp)) {
fixmw_out_ncp_param[i] <- model_fixwin_ncp[[i]][["coefficients"]][["outdegreeSender"]]
}
plot(fixmw_out_ncp_param, type = "point") # plot the movement of parameter
REH_1CP <- readRDS("Data/REH_1CP.RDS")
# compute the statistics
out.1cp <- remstats(tie_effects = formula, edgelist = REH_1CP) # also will be used for fitting REM
stat.1cp <- out.1cp[["statistics"]] # extract the statistics from the list
# maximum time point of the REH
tau <- max(REH_1CP$time)
# specify the length of the window
windows_1cp <- REHdynamics::createwindows(1500, tau)
# fit to the REM model
model_fixwin_1cp <- REHdynamics::MWrem(windows_1cp, edgelist = REH_1CP,
stats = stat.1cp,
actors = covar$id, directed = TRUE,
method = "MLE", model = "tie", ncores = 2)
# extract the parameters
fixmw_send_1cp_param <- 1
for (i in 1:length(model_fixwin_1cp)) {
fixmw_send_1cp_param[i] <- model_fixwin_1cp[[i]][["coefficients"]][["send.z"]]
}
plot(fixmw_send_1cp_param, type = "lm") # plot the movement of parameter
# extract the parameters
fixmw_diff_1cp_param <- 1
for (i in 1:length(model_fixwin_1cp)) {
fixmw_diff_1cp_param[i] <- model_fixwin_1cp[[i]][["coefficients"]][["difference.z"]]
}
plot(fixmw_diff_1cp_param, type = "lm") # plot the movement of parameter
# extract the parameters
fixmw_ine_1cp_param <- 1
for (i in 1:length(model_fixwin_1cp)) {
fixmw_ine_1cp_param[i] <- model_fixwin_1cp[[i]][["coefficients"]][["inertia"]]
}
plot(fixmw_ine_1cp_param, type = "lm") # plot the movement of parameter
# extract the parameters
fixmw_out_1cp_param <- 1
for (i in 1:length(model_fixwin_1cp)) {
fixmw_out_1cp_param[i] <- model_fixwin_1cp[[i]][["coefficients"]][["outdegreeSender"]]
}
plot(fixmw_out_1cp_param, type = "lm") # plot the movement of parameter
REH_1CP_same.all <- readRDS("Data/REH_1CP_same.all.RDS")
# compute the statistics
out.1cp_same.all <- remstats(tie_effects = formula, edgelist = REH_1CP_same.all) # also will be used for fitting REM
stat.1cp_same.all <- out.1cp_same.all[["statistics"]] # extract the statistics from the list
# maximum time point of the REH
tau <- max(REH_1CP_same.all$time)
# specify the length of the window
windows_1cp_same.all <- REHdynamics::createwindows(1500, tau)
# fit to the REM model
model_fixwin_1cp_same.all <- REHdynamics::MWrem(windows_1cp_same.all, edgelist = REH_1CP_same.all,
stats = stat.1cp_same.all,
actors = covar$id, directed = TRUE,
method = "MLE", model = "tie", ncores = 2)
# extract the parameters
fixmw_send_1cp_param_same.all <- 1
for (i in 1:length(model_fixwin_1cp_same.all)) {
fixmw_send_1cp_param_same.all[i] <- model_fixwin_1cp_same.all[[i]][["coefficients"]][["send.z"]]
}
plot(fixmw_send_1cp_param_same.all, type = "lm") # plot the movement of parameter
# extract the parameters
fixmw_diff_1cp_param_same.all <- 1
for (i in 1:length(model_fixwin_1cp_same.all)) {
fixmw_diff_1cp_param_same.all[i] <- model_fixwin_1cp_same.all[[i]][["coefficients"]][["difference.z"]]
}
plot(fixmw_diff_1cp_param_same.all, type = "lm") # plot the movement of parameter
# extract the parameters
fixmw_ine_1cp_param_same.all <- 1
for (i in 1:length(model_fixwin_1cp_same.all)) {
fixmw_ine_1cp_param_same.all[i] <- model_fixwin_1cp_same.all[[i]][["coefficients"]][["inertia"]]
}
plot(fixmw_ine_1cp_param_same.all, type = "lm") # plot the movement of parameter
# extract the parameters
fixmw_out_1cp_param_same.all <- 1
for (i in 1:length(model_fixwin_1cp_same.all)) {
fixmw_out_1cp_param_same.all[i] <- model_fixwin_1cp_same.all[[i]][["coefficients"]][["outdegreeSender"]]
}
plot(fixmw_out_1cp_param_same.all, type = "lm") # plot the movement of parameter
REH_1CP_diff.all <- readRDS("Data/REH_1CP_diff.all.RDS")
# compute the statistics
out.1cp_diff.all <- remstats(tie_effects = formula, edgelist = REH_1CP_diff.all) # also will be used for fitting REM
stat.1cp_diff.all <- out.1cp_diff.all[["statistics"]] # extract the statistics from the list
# maximum time point of the REH
tau <- max(REH_1CP_diff.all$time)
# specify the length of the window
windows_1cp_diff.all <- REHdynamics::createwindows(1500, tau)
# fit to the REM model
model_fixwin_1cp_diff.all <- REHdynamics::MWrem(windows_1cp_diff.all, edgelist = REH_1CP_diff.all,
stats = stat.1cp_diff.all,
actors = covar$id, directed = TRUE,
method = "MLE", model = "tie", ncores = 2)
# extract the parameters
fixmw_send_1cp_param_diff.all <- 1
for (i in 1:length(model_fixwin_1cp_diff.all)) {
fixmw_send_1cp_param_diff.all[i] <- model_fixwin_1cp_diff.all[[i]][["coefficients"]][["send.z"]]
}
plot(fixmw_send_1cp_param_diff.all, type = "lm") # plot the movement of parameter
# extract the parameters
fixmw_diff_1cp_param_diff.all <- 1
for (i in 1:length(model_fixwin_1cp_diff.all)) {
fixmw_diff_1cp_param_diff.all[i] <- model_fixwin_1cp_diff.all[[i]][["coefficients"]][["difference.z"]]
}
plot(fixmw_diff_1cp_param_diff.all, type = "lm") # plot the movement of parameter
# extract the parameters
fixmw_ine_1cp_param_diff.all <- 1
for (i in 1:length(model_fixwin_1cp_diff.all)) {
fixmw_ine_1cp_param_diff.all[i] <- model_fixwin_1cp_diff.all[[i]][["coefficients"]][["inertia"]]
}
plot(fixmw_ine_1cp_param_diff.all, type = "lm") # plot the movement of parameter
# extract the parameters
fixmw_out_1cp_param_diff.all <- 1
for (i in 1:length(model_fixwin_1cp_diff.all)) {
fixmw_out_1cp_param_diff.all[i] <- model_fixwin_1cp_diff.all[[i]][["coefficients"]][["outdegreeSender"]]
}
plot(fixmw_out_1cp_param_diff.all, type = "lm") # plot the movement of parameter
REH_2CP <- readRDS("Data/REH_2CP.RDS")
# compute the statistics
out.2cp <- remstats(tie_effects = formula, edgelist = REH_2CP) # also will be used for fitting REM
stat.2cp <- out.2cp[["statistics"]] # extract the statistics from the list
# maximum time point of the REH
tau <- max(REH_2CP$time)
# specify the length of the window
windows_2cp <- REHdynamics::createwindows(1500, tau)
# fit to the REM model
model_fixwin_2cp <- REHdynamics::MWrem(windows_2cp, edgelist = REH_2CP,
stats = stat.2cp,
actors = covar$id, directed = TRUE,
method = "MLE", model = "tie", ncores = 2)
# extract the parameters
fixmw_send_2cp_param <- 1
for (i in 1:length(model_fixwin_2cp)) {
fixmw_send_2cp_param[i] <- model_fixwin_2cp[[i]][["coefficients"]][["send.z"]]
}
plot(fixmw_send_2cp_param, type = "lm") # plot the movement of parameter
# extract the parameters
fixmw_diff_2cp_param <- 1
for (i in 1:length(model_fixwin_2cp)) {
fixmw_diff_2cp_param[i] <- model_fixwin_2cp[[i]][["coefficients"]][["difference.z"]]
}
plot(fixmw_diff_2cp_param, type = "lm") # plot the movement of parameter
# extract the parameters
fixmw_ine_2cp_param <- 1
for (i in 1:length(model_fixwin_2cp)) {
fixmw_ine_2cp_param[i] <- model_fixwin_2cp[[i]][["coefficients"]][["inertia"]]
}
plot(fixmw_ine_2cp_param, type = "lm") # plot the movement of parameter
# extract the parameters
fixmw_out_2cp_param <- 1
for (i in 1:length(model_fixwin_2cp)) {
fixmw_out_2cp_param[i] <- model_fixwin_2cp[[i]][["coefficients"]][["outdegreeSender"]]
}
plot(fixmw_out_2cp_param, type = "lm") # plot the movement of parameter
REH_2CP_same.all <- readRDS("Data/REH_2CP_same.all.RDS")
# compute the statistics
out.2cp_same.all <- remstats(tie_effects = formula, edgelist = REH_2CP_same.all) # also will be used for fitting REM
stat.2cp_same.all <- out.2cp_same.all[["statistics"]] # extract the statistics from the list
# maximum time point of the REH
tau <- max(REH_2CP_same.all$time)
# specify the length of the window
windows_2cp_same.all <- REHdynamics::createwindows(1500, tau)
# fit to the REM model
model_fixwin_2cp_same.all <- REHdynamics::MWrem(windows_2cp_same.all, edgelist = REH_2CP_same.all,
stats = stat.2cp_same.all,
actors = covar$id, directed = TRUE,
method = "MLE", model = "tie", ncores = 2)
# extract the parameters
fixmw_send_2cp_param_same.all <- 1
for (i in 1:length(model_fixwin_2cp_same.all)) {
fixmw_send_2cp_param_same.all[i] <- model_fixwin_2cp_same.all[[i]][["coefficients"]][["send.z"]]
}
plot(fixmw_send_2cp_param_same.all, type = "lm") # plot the movement of parameter
# extract the parameters
fixmw_diff_2cp_param_same.all <- 1
for (i in 1:length(model_fixwin_2cp_same.all)) {
fixmw_diff_2cp_param_same.all[i] <- model_fixwin_2cp_same.all[[i]][["coefficients"]][["difference.z"]]
}
plot(fixmw_diff_2cp_param_same.all, type = "lm") # plot the movement of parameter
# extract the parameters
fixmw_ine_2cp_param_same.all <- 1
for (i in 1:length(model_fixwin_2cp_same.all)) {
fixmw_ine_2cp_param_same.all[i] <- model_fixwin_2cp_same.all[[i]][["coefficients"]][["inertia"]]
}
plot(fixmw_ine_2cp_param_same.all, type = "lm") # plot the movement of parameter
# extract the parameters
fixmw_out_2cp_param_same.all <- 1
for (i in 1:length(model_fixwin_2cp_same.all)) {
fixmw_out_2cp_param_same.all[i] <- model_fixwin_2cp_same.all[[i]][["coefficients"]][["outdegreeSender"]]
}
plot(fixmw_out_2cp_param_same.all, type = "lm") # plot the movement of parameter
REH_2CP_diff.all <- readRDS("Data/REH_2CP_diff.all.RDS")
# compute the statistics
out.2cp_diff.all <- remstats(tie_effects = formula, edgelist = REH_2CP_diff.all) # also will be used for fitting REM
stat.2cp_diff.all <- out.2cp_diff.all[["statistics"]] # extract the statistics from the list
# maximum time point of the REH
tau <- max(REH_2CP_diff.all$time)
# specify the length of the window
windows_2cp_diff.all <- REHdynamics::createwindows(1500, tau)
# fit to the REM model
model_fixwin_2cp_diff.all <- REHdynamics::MWrem(windows_2cp_diff.all, edgelist = REH_2CP_diff.all,
stats = stat.2cp_diff.all,
actors = covar$id, directed = TRUE,
method = "MLE", model = "tie", ncores = 2)
# extract the parameters
fixmw_send_2cp_param_diff.all <- 1
for (i in 1:length(model_fixwin_2cp_diff.all)) {
fixmw_send_2cp_param_diff.all[i] <- model_fixwin_2cp_diff.all[[i]][["coefficients"]][["send.z"]]
}
plot(fixmw_send_2cp_param_diff.all, type = "lm") # plot the movement of parameter
# extract the parameters
fixmw_diff_2cp_param_diff.all <- 1
for (i in 1:length(model_fixwin_2cp_diff.all)) {
fixmw_diff_2cp_param_diff.all[i] <- model_fixwin_2cp_diff.all[[i]][["coefficients"]][["difference.z"]]
}
plot(fixmw_diff_2cp_param_diff.all, type = "lm") # plot the movement of parameter
# extract the parameters
fixmw_ine_2cp_param_diff.all <- 1
for (i in 1:length(model_fixwin_2cp_diff.all)) {
fixmw_ine_2cp_param_diff.all[i] <- model_fixwin_2cp_diff.all[[i]][["coefficients"]][["inertia"]]
}
plot(fixmw_ine_2cp_param_diff.all, type = "lm") # plot the movement of parameter
# extract the parameters
fixmw_out_2cp_param_diff.all <- 1
for (i in 1:length(model_fixwin_2cp_diff.all)) {
fixmw_out_2cp_param_diff.all[i] <- model_fixwin_2cp_diff.all[[i]][["coefficients"]][["outdegreeSender"]]
}
plot(fixmw_out_2cp_param_diff.all, type = "lm") # plot the movement of parameter
REH_3CP <- readRDS("Data/REH_3CP.RDS")
# compute the statistics
out.3cp <- remstats(tie_effects = formula, edgelist = REH_3CP) # also will be used for fitting REM
stat.3cp <- out.3cp[["statistics"]] # extract the statistics from the list
# maximum time point of the REH
tau <- max(REH_3CP$time)
# specify the length of the window
windows_3cp <- REHdynamics::createwindows(1500, tau)
# fit to the REM model
model_fixwin_3cp <- REHdynamics::MWrem(windows_3cp, edgelist = REH_3CP,
stats = stat.3cp,
actors = covar$id, directed = TRUE,
method = "MLE", model = "tie", ncores = 2)
# extract the parameters
fixmw_send_3cp_param <- 1
for (i in 1:length(model_fixwin_3cp)) {
fixmw_send_3cp_param[i] <- model_fixwin_3cp[[i]][["coefficients"]][["send.z"]]
}
plot(fixmw_send_3cp_param, type = "lm") # plot the movement of parameter
# extract the parameters
fixmw_diff_3cp_param <- 1
for (i in 1:length(model_fixwin_3cp)) {
fixmw_diff_3cp_param[i] <- model_fixwin_3cp[[i]][["coefficients"]][["difference.z"]]
}
plot(fixmw_diff_3cp_param, type = "lm") # plot the movement of parameter
# extract the parameters
fixmw_ine_3cp_param <- 1
for (i in 1:length(model_fixwin_3cp)) {
fixmw_ine_3cp_param[i] <- model_fixwin_3cp[[i]][["coefficients"]][["inertia"]]
}
plot(fixmw_ine_3cp_param, type = "lm") # plot the movement of parameter
# extract the parameters
fixmw_out_3cp_param <- 1
for (i in 1:length(model_fixwin_3cp)) {
fixmw_out_3cp_param[i] <- model_fixwin_3cp[[i]][["coefficients"]][["outdegreeSender"]]
}
plot(fixmw_out_3cp_param, type = "lm") # plot the movement of parameter
REH_3CP_same.all <- readRDS("Data/REH_3CP_same.all.RDS")
# compute the statistics
out.3cp_same.all <- remstats(tie_effects = formula, edgelist = REH_3CP_same.all) # also will be used for fitting REM
stat.3cp_same.all <- out.3cp_same.all[["statistics"]] # extract the statistics from the list
# maximum time point of the REH
tau <- max(REH_3CP_same.all$time)
# specify the length of the window
windows_3cp_same.all <- REHdynamics::createwindows(1500, tau)
# fit to the REM model
model_fixwin_3cp_same.all <- REHdynamics::MWrem(windows_3cp_same.all, edgelist = REH_3CP_same.all,
stats = stat.3cp_same.all,
actors = covar$id, directed = TRUE,
method = "MLE", model = "tie", ncores = 2)
# extract the parameters
fixmw_send_3cp_param_same.all <- 1
for (i in 1:length(model_fixwin_3cp_same.all)) {
fixmw_send_3cp_param_same.all[i] <- model_fixwin_3cp_same.all[[i]][["coefficients"]][["send.z"]]
}
plot(fixmw_send_3cp_param_same.all, type = "lm") # plot the movement of parameter
# extract the parameters
fixmw_diff_3cp_param_same.all <- 1
for (i in 1:length(model_fixwin_3cp_same.all)) {
fixmw_diff_3cp_param_same.all[i] <- model_fixwin_3cp_same.all[[i]][["coefficients"]][["difference.z"]]
}
plot(fixmw_diff_3cp_param_same.all, type = "lm") # plot the movement of parameter
# extract the parameters
fixmw_ine_3cp_param_same.all <- 1
for (i in 1:length(model_fixwin_3cp_same.all)) {
fixmw_ine_3cp_param_same.all[i] <- model_fixwin_3cp_same.all[[i]][["coefficients"]][["inertia"]]
}
plot(fixmw_ine_3cp_param_same.all, type = "lm") # plot the movement of parameter
# extract the parameters
fixmw_out_3cp_param_same.all <- 1
for (i in 1:length(model_fixwin_3cp_same.all)) {
fixmw_out_3cp_param_same.all[i] <- model_fixwin_3cp_same.all[[i]][["coefficients"]][["outdegreeSender"]]
}
plot(fixmw_out_3cp_param_same.all, type = "lm") # plot the movement of parameter
REH_3CP_diff.all <- readRDS("Data/REH_3CP_diff.all.RDS")
# compute the statistics
out.3cp_diff.all <- remstats(tie_effects = formula, edgelist = REH_3CP_diff.all) # also will be used for fitting REM
stat.3cp_diff.all <- out.3cp_diff.all[["statistics"]] # extract the statistics from the list
# maximum time point of the REH
tau <- max(REH_3CP_diff.all$time)
# specify the length of the window
windows_3cp_diff.all <- REHdynamics::createwindows(1500, tau)
# fit to the REM model
model_fixwin_3cp_diff.all <- REHdynamics::MWrem(windows_3cp_diff.all, edgelist = REH_3CP_diff.all,
stats = stat.3cp_diff.all,
actors = covar$id, directed = TRUE,
method = "MLE", model = "tie", ncores = 2)
# extract the parameters
fixmw_send_3cp_param_diff.all <- 1
for (i in 1:length(model_fixwin_3cp_diff.all)) {
fixmw_send_3cp_param_diff.all[i] <- model_fixwin_3cp_diff.all[[i]][["coefficients"]][["send.z"]]
}
plot(fixmw_send_3cp_param_diff.all, type = "lm") # plot the movement of parameter
# extract the parameters
fixmw_diff_3cp_param_diff.all <- 1
for (i in 1:length(model_fixwin_3cp_diff.all)) {
fixmw_diff_3cp_param_diff.all[i] <- model_fixwin_3cp_diff.all[[i]][["coefficients"]][["difference.z"]]
}
plot(fixmw_diff_3cp_param_diff.all, type = "lm") # plot the movement of parameter
# extract the parameters
fixmw_ine_3cp_param_diff.all <- 1
for (i in 1:length(model_fixwin_3cp_diff.all)) {
fixmw_ine_3cp_param_diff.all[i] <- model_fixwin_3cp_diff.all[[i]][["coefficients"]][["inertia"]]
}
plot(fixmw_ine_3cp_param_diff.all, type = "lm") # plot the movement of parameter
# extract the parameters
fixmw_out_3cp_param_diff.all <- 1
for (i in 1:length(model_fixwin_3cp_diff.all)) {
fixmw_out_3cp_param_diff.all[i] <- model_fixwin_3cp_diff.all[[i]][["coefficients"]][["outdegreeSender"]]
}
plot(fixmw_out_3cp_param_diff.all, type = "lm") # plot the movement of parameter
library(ocp) # package for BOCD
library(changepoint) # package for PELT, BS
BOCD_fixmw_send_ncp_param <- onlineCPD(fixmw_send_ncp_param, getR = T, optionalOutputs = T, truncRlim = 10^-4)
BOCD_fixmw_send_ncp_param[["changepoint_lists"]][["maxCPs"]][[1]]
plot(BOCD_fixmw_send_ncp_param)
BOCD_fixmw_diff_ncp_param <- onlineCPD(fixmw_diff_ncp_param, getR = T, optionalOutputs = T, truncRlim = 10^-4)
BOCD_fixmw_diff_ncp_param[["changepoint_lists"]][["maxCPs"]][[1]]
plot(BOCD_fixmw_diff_ncp_param)
BOCD_fixmw_ine_ncp_param <- onlineCPD(fixmw_ine_ncp_param, getR = T, optionalOutputs = T, truncRlim = 10^-4)
BOCD_fixmw_ine_ncp_param[["changepoint_lists"]][["maxCPs"]][[1]]
plot(BOCD_fixmw_ine_ncp_param)
BOCD_fixmw_out_ncp_param <- onlineCPD(fixmw_out_ncp_param, getR = T, optionalOutputs = T, truncRlim = 10^-4)
BOCD_fixmw_out_ncp_param[["changepoint_lists"]][["maxCPs"]][[1]]
plot(BOCD_fixmw_out_ncp_param)
BOCD_fixmw_send_1cp_param <- onlineCPD(fixmw_send_1cp_param, getR = T, optionalOutputs = T, truncRlim = 10^-4)
BOCD_fixmw_send_1cp_param[["changepoint_lists"]][["maxCPs"]][[1]]
plot(BOCD_fixmw_send_1cp_param)
BOCD_fixmw_diff_1cp_param <- onlineCPD(fixmw_diff_1cp_param, getR = T, optionalOutputs = T, truncRlim = 10^-4)
BOCD_fixmw_diff_1cp_param[["changepoint_lists"]][["maxCPs"]][[1]]
plot(BOCD_fixmw_diff_1cp_param)
BOCD_fixmw_ine_1cp_param <- onlineCPD(fixmw_ine_1cp_param, getR = T, optionalOutputs = T, truncRlim = 10^-4)
BOCD_fixmw_ine_1cp_param[["changepoint_lists"]][["maxCPs"]][[1]]
plot(BOCD_fixmw_ine_1cp_param)
BOCD_fixmw_out_1cp_param <- onlineCPD(fixmw_out_1cp_param, getR = T, optionalOutputs = T, truncRlim = 10^-4)
BOCD_fixmw_out_1cp_param[["changepoint_lists"]][["maxCPs"]][[1]]
plot(BOCD_fixmw_out_1cp_param)
BOCD_fixmw_send_1cp_param_same.all <- onlineCPD(fixmw_send_1cp_param_same.all,
getR = T, optionalOutputs = T, truncRlim = 10^-4)
BOCD_fixmw_send_1cp_param_same.all[["changepoint_lists"]][["maxCPs"]][[1]]
plot(BOCD_fixmw_send_1cp_param_same.all)
BOCD_fixmw_diff_1cp_param_same.all <- onlineCPD(fixmw_diff_1cp_param_same.all,
getR = T, optionalOutputs = T, truncRlim = 10^-4)
BOCD_fixmw_diff_1cp_param_same.all[["changepoint_lists"]][["maxCPs"]][[1]]
plot(BOCD_fixmw_diff_1cp_param_same.all)
BOCD_fixmw_ine_1cp_param_same.all <- onlineCPD(fixmw_ine_1cp_param_same.all,
getR = T, optionalOutputs = T, truncRlim = 10^-4)
BOCD_fixmw_ine_1cp_param_same.all[["changepoint_lists"]][["maxCPs"]][[1]]
plot(BOCD_fixmw_ine_1cp_param_same.all)
BOCD_fixmw_out_1cp_param_same.all <- onlineCPD(fixmw_out_1cp_param_same.all,
getR = T, optionalOutputs = T, truncRlim = 10^-4)
BOCD_fixmw_out_1cp_param_same.all[["changepoint_lists"]][["maxCPs"]][[1]]
plot(BOCD_fixmw_out_1cp_param_same.all)
BOCD_fixmw_send_1cp_param_diff.all <- onlineCPD(fixmw_send_1cp_param_diff.all,
getR = T, optionalOutputs = T, truncRlim = 10^-4)
BOCD_fixmw_send_1cp_param_diff.all[["changepoint_lists"]][["maxCPs"]][[1]]
plot(BOCD_fixmw_send_1cp_param_diff.all)
BOCD_fixmw_diff_1cp_param_diff.all <- onlineCPD(fixmw_diff_1cp_param_diff.all,
getR = T, optionalOutputs = T, truncRlim = 10^-4)
BOCD_fixmw_diff_1cp_param_diff.all[["changepoint_lists"]][["maxCPs"]][[1]]
plot(BOCD_fixmw_diff_1cp_param_diff.all)
BOCD_fixmw_ine_1cp_param_diff.all <- onlineCPD(fixmw_ine_1cp_param_diff.all,
getR = T, optionalOutputs = T, truncRlim = 10^-4)
BOCD_fixmw_ine_1cp_param_diff.all[["changepoint_lists"]][["maxCPs"]][[1]]
plot(BOCD_fixmw_ine_1cp_param_diff.all)
BOCD_fixmw_out_1cp_param_diff.all <- onlineCPD(fixmw_out_1cp_param_diff.all,
getR = T, optionalOutputs = T, truncRlim = 10^-4)
BOCD_fixmw_out_1cp_param_diff.all[["changepoint_lists"]][["maxCPs"]][[1]]
plot(BOCD_fixmw_out_1cp_param_diff.all)
BOCD_fixmw_send_2cp_param <- onlineCPD(fixmw_send_2cp_param, getR = T, optionalOutputs = T, truncRlim = 10^-4)
BOCD_fixmw_send_2cp_param[["changepoint_lists"]][["maxCPs"]][[1]]
plot(BOCD_fixmw_send_2cp_param)
BOCD_fixmw_diff_2cp_param <- onlineCPD(fixmw_diff_2cp_param, getR = T, optionalOutputs = T, truncRlim = 10^-4)
BOCD_fixmw_diff_2cp_param[["changepoint_lists"]][["maxCPs"]][[1]]
plot(BOCD_fixmw_diff_2cp_param)
BOCD_fixmw_ine_2cp_param <- onlineCPD(fixmw_ine_2cp_param, getR = T, optionalOutputs = T, truncRlim = 10^-4)
BOCD_fixmw_ine_2cp_param[["changepoint_lists"]][["maxCPs"]][[1]]
plot(BOCD_fixmw_ine_2cp_param)
BOCD_fixmw_out_2cp_param <- onlineCPD(fixmw_out_2cp_param, getR = T, optionalOutputs = T, truncRlim = 10^-4)
BOCD_fixmw_out_2cp_param[["changepoint_lists"]][["maxCPs"]][[1]]
plot(BOCD_fixmw_out_2cp_param)
BOCD_fixmw_send_2cp_param_same.all <- onlineCPD(fixmw_send_2cp_param_same.all,
getR = T, optionalOutputs = T, truncRlim = 10^-4)
BOCD_fixmw_send_2cp_param_same.all[["changepoint_lists"]][["maxCPs"]][[1]]
plot(BOCD_fixmw_send_2cp_param_same.all)
BOCD_fixmw_diff_2cp_param_same.all <- onlineCPD(fixmw_diff_2cp_param_same.all,
getR = T, optionalOutputs = T, truncRlim = 10^-4)
BOCD_fixmw_diff_2cp_param_same.all[["changepoint_lists"]][["maxCPs"]][[1]]
plot(BOCD_fixmw_diff_2cp_param_same.all)
BOCD_fixmw_ine_2cp_param_same.all <- onlineCPD(fixmw_ine_2cp_param_same.all,
getR = T, optionalOutputs = T, truncRlim = 10^-4)
BOCD_fixmw_ine_2cp_param_same.all[["changepoint_lists"]][["maxCPs"]][[1]]
plot(BOCD_fixmw_ine_2cp_param_same.all)
BOCD_fixmw_out_2cp_param_same.all <- onlineCPD(fixmw_out_2cp_param_same.all,
getR = T, optionalOutputs = T, truncRlim = 10^-4)
BOCD_fixmw_out_2cp_param_same.all[["changepoint_lists"]][["maxCPs"]][[1]]
plot(BOCD_fixmw_out_2cp_param_same.all)
BOCD_fixmw_send_2cp_param_diff.all <- onlineCPD(fixmw_send_2cp_param_diff.all,
getR = T, optionalOutputs = T, truncRlim = 10^-4)
BOCD_fixmw_send_2cp_param_diff.all[["changepoint_lists"]][["maxCPs"]][[1]]
plot(BOCD_fixmw_send_2cp_param_diff.all)
BOCD_fixmw_diff_2cp_param_diff.all <- onlineCPD(fixmw_diff_2cp_param_diff.all,
getR = T, optionalOutputs = T, truncRlim = 10^-4)
BOCD_fixmw_diff_2cp_param_diff.all[["changepoint_lists"]][["maxCPs"]][[1]]
plot(BOCD_fixmw_diff_2cp_param_diff.all)
BOCD_fixmw_ine_2cp_param_diff.all <- onlineCPD(fixmw_ine_2cp_param_diff.all,
getR = T, optionalOutputs = T, truncRlim = 10^-4)
BOCD_fixmw_ine_2cp_param_diff.all[["changepoint_lists"]][["maxCPs"]][[1]]
plot(BOCD_fixmw_ine_2cp_param_diff.all)
BOCD_fixmw_out_2cp_param_diff.all <- onlineCPD(fixmw_out_2cp_param_diff.all,
getR = T, optionalOutputs = T, truncRlim = 10^-4)
BOCD_fixmw_out_2cp_param_diff.all[["changepoint_lists"]][["maxCPs"]][[1]]
plot(BOCD_fixmw_out_2cp_param_diff.all)
