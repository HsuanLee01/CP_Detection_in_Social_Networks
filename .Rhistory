BS_fixmw_out_2cp_param_same.all[[i]]@cpts[-length(BS_fixmw_out_2cp_param_same.all[[i]]@cpts)]
}
# plot the location of CPs
for (i in 1:length(BS_fixmw_out_2cp_param_same.all)) {
plot(BS_fixmw_out_2cp_param_same.all[[i]], type="point", col = "black")
abline(v=BS_fixmw_out_2cp_param_same.all[[i]]@cpts[-length(BS_fixmw_out_2cp_param_same.all[[i]]@cpts)], col="black")
}
fixmw_send_2cp_param_diff.all <- readRDS("Window_Parameters/fixmw_send_2cp_param_diff.all.RDS")
fixmw_diff_2cp_param_diff.all <- readRDS("Window_Parameters/fixmw_diff_2cp_param_diff.all.RDS")
fixmw_ine_2cp_param_diff.all <- readRDS("Window_Parameters/fixmw_ine_2cp_param_diff.all.RDS")
fixmw_out_2cp_param_diff.all <- readRDS("Window_Parameters/fixmw_out_2cp_param_diff.all.RDS")
# Detect the CPs
BOCD_fixmw_send_2cp_param_diff.all <- list()
for (i in 1:length(fixmw_send_2cp_param_diff.all)) {
BOCD_fixmw_send_2cp_param_diff.all[[i]] <- onlineCPD(fixmw_send_2cp_param_diff.all[[i]],
getR = T,
optionalOutputs = T,
truncRlim = 10^-4)
}
# location of the CPs
locat_BOCD_2cp_send_diff.all <- list()
for (i in 1:length(BOCD_fixmw_send_2cp_param_diff.all)) {
locat_BOCD_2cp_send_diff.all[[i]] <- BOCD_fixmw_send_2cp_param_diff.all[[i]][["changepoint_lists"]][["maxCPs"]][[1]]
# remove the first value of the vector, as BOCPD function indicates the first window as CP all the time
locat_BOCD_2cp_send_diff.all[[i]] <- locat_BOCD_2cp_send_diff.all[[i]][-1]
}
# plot the CPs for each iteration
for (i in 1:length(BOCD_fixmw_send_2cp_param_diff.all)) {
plot(BOCD_fixmw_send_2cp_param_diff.all[[i]])
}
# Detect the CPs
BOCD_fixmw_diff_2cp_param_diff.all <- list()
for (i in 1:length(fixmw_diff_2cp_param_diff.all)) {
BOCD_fixmw_diff_2cp_param_diff.all[[i]] <- onlineCPD(fixmw_diff_2cp_param_diff.all[[i]],
getR = T,
optionalOutputs = T,
truncRlim = 10^-4)
}
# location of the CPs
locat_BOCD_2cp_diff_diff.all <- list()
for (i in 1:length(BOCD_fixmw_diff_2cp_param_diff.all)) {
locat_BOCD_2cp_diff_diff.all[[i]] <- BOCD_fixmw_diff_2cp_param_diff.all[[i]][["changepoint_lists"]][["maxCPs"]][[1]]
# remove the first value of the vector, as BOCPD function indicates the first window as CP all the time
locat_BOCD_2cp_diff_diff.all[[i]] <- locat_BOCD_2cp_diff_diff.all[[i]][-1]
}
# plot the CPs for each iteration
for (i in 1:length(BOCD_fixmw_diff_2cp_param_diff.all)) {
plot(BOCD_fixmw_diff_2cp_param_diff.all[[i]])
}
# Detect the CPs
BOCD_fixmw_ine_2cp_param_diff.all <- list()
for (i in 1:length(fixmw_ine_2cp_param_diff.all)) {
BOCD_fixmw_ine_2cp_param_diff.all[[i]] <- onlineCPD(fixmw_ine_2cp_param_diff.all[[i]],
getR = T,
optionalOutputs = T,
truncRlim = 10^-4)
}
# location of the CPs
locat_BOCD_2cp_ine_diff.all <- list()
for (i in 1:length(BOCD_fixmw_ine_2cp_param_diff.all)) {
locat_BOCD_2cp_ine_diff.all[[i]] <- BOCD_fixmw_ine_2cp_param_diff.all[[i]][["changepoint_lists"]][["maxCPs"]][[1]]
# remove the first value of the vector, as BOCPD function indicates the first window as CP all the time
locat_BOCD_2cp_ine_diff.all[[i]] <- locat_BOCD_2cp_ine_diff.all[[i]][-1]
}
# plot the CPs for each iteration
for (i in 1:length(BOCD_fixmw_ine_2cp_param_diff.all)) {
plot(BOCD_fixmw_ine_2cp_param_diff.all[[i]])
}
# Detect the CPs
BOCD_fixmw_out_2cp_param_diff.all <- list()
for (i in 1:length(fixmw_out_2cp_param_diff.all)) {
BOCD_fixmw_out_2cp_param_diff.all[[i]] <- onlineCPD(fixmw_out_2cp_param_diff.all[[i]],
getR = T,
optionalOutputs = T,
truncRlim = 10^-4)
}
# location of the CPs
locat_BOCD_2cp_out_diff.all <- list()
for (i in 1:length(BOCD_fixmw_out_2cp_param_diff.all)) {
locat_BOCD_2cp_out_diff.all[[i]] <- BOCD_fixmw_out_2cp_param_diff.all[[i]][["changepoint_lists"]][["maxCPs"]][[1]]
# remove the first value of the vector, as BOCPD function indicates the first window as CP all the time
locat_BOCD_2cp_out_diff.all[[i]] <- locat_BOCD_2cp_out_diff.all[[i]][-1]
}
# plot the CPs for each iteration
for (i in 1:length(BOCD_fixmw_out_2cp_param_diff.all)) {
plot(BOCD_fixmw_out_2cp_param_diff.all[[i]])
}
# detect the changepoints
PELT_fixmw_send_2cp_param_diff.all <- list()
for (i in 1:length(fixmw_out_2cp_param_diff.all)) {
PELT_fixmw_send_2cp_param_diff.all[[i]] <- cpt.meanvar(fixmw_send_2cp_param_diff.all[[i]], method="PELT")
}
# location of the changepoints
locat_PELT_2cp_send_diff.all <- list()
for (i in 1:length(PELT_fixmw_send_2cp_param_diff.all)) {
locat_PELT_2cp_send_diff.all[[i]] <-
# remove the last value of the vector, as PELT function indicates the last window as CP all the time
PELT_fixmw_send_2cp_param_diff.all[[i]]@cpts[-length(PELT_fixmw_send_2cp_param_diff.all[[i]]@cpts)]
}
# plot the location of CPs
for (i in 1:length(PELT_fixmw_send_2cp_param_diff.all)) {
plot(PELT_fixmw_send_2cp_param_diff.all[[i]], type="point", col = "black")
abline(v=PELT_fixmw_send_2cp_param_diff.all[[i]]@cpts[-length(PELT_fixmw_send_2cp_param_diff.all[[i]]@cpts)], col="black")
}
# detect the changepoints
PELT_fixmw_diff_2cp_param_diff.all <- list()
for (i in 1:length(fixmw_out_2cp_param_diff.all)) {
PELT_fixmw_diff_2cp_param_diff.all[[i]] <- cpt.meanvar(fixmw_diff_2cp_param_diff.all[[i]], method="PELT")
}
# location of the changepoints
locat_PELT_2cp_diff_diff.all <- list()
for (i in 1:length(PELT_fixmw_diff_2cp_param_diff.all)) {
locat_PELT_2cp_diff_diff.all[[i]] <-
# remove the last value of the vector, as PELT function indicates the last window as CP all the time
PELT_fixmw_diff_2cp_param_diff.all[[i]]@cpts[-length(PELT_fixmw_diff_2cp_param_diff.all[[i]]@cpts)]
}
# plot the location of CPs
for (i in 1:length(PELT_fixmw_diff_2cp_param_diff.all)) {
plot(PELT_fixmw_diff_2cp_param_diff.all[[i]], type="point", col = "black")
abline(v=PELT_fixmw_diff_2cp_param_diff.all[[i]]@cpts[-length(PELT_fixmw_diff_2cp_param_diff.all[[i]]@cpts)], col="black")
}
# detect the changepoints
PELT_fixmw_ine_2cp_param_diff.all <- list()
for (i in 1:length(fixmw_out_2cp_param_diff.all)) {
PELT_fixmw_ine_2cp_param_diff.all[[i]] <- cpt.meanvar(fixmw_ine_2cp_param_diff.all[[i]], method="PELT")
}
# location of the changepoints
locat_PELT_2cp_ine_diff.all <- list()
for (i in 1:length(PELT_fixmw_ine_2cp_param_diff.all)) {
locat_PELT_2cp_ine_diff.all[[i]] <-
# remove the last value of the vector, as PELT function indicates the last window as CP all the time
PELT_fixmw_ine_2cp_param_diff.all[[i]]@cpts[-length(PELT_fixmw_ine_2cp_param_diff.all[[i]]@cpts)]
}
# plot the location of CPs
for (i in 1:length(PELT_fixmw_ine_2cp_param_diff.all)) {
plot(PELT_fixmw_ine_2cp_param_diff.all[[i]], type="point", col = "black")
abline(v=PELT_fixmw_ine_2cp_param_diff.all[[i]]@cpts[-length(PELT_fixmw_ine_2cp_param_diff.all[[i]]@cpts)], col="black")
}
# detect the changepoints
PELT_fixmw_out_2cp_param_diff.all <- list()
for (i in 1:length(fixmw_out_2cp_param_diff.all)) {
PELT_fixmw_out_2cp_param_diff.all[[i]] <- cpt.meanvar(fixmw_out_2cp_param_diff.all[[i]], method="PELT")
}
# location of the changepoints
locat_PELT_2cp_out_diff.all <- list()
for (i in 1:length(PELT_fixmw_out_2cp_param_diff.all)) {
locat_PELT_2cp_out_diff.all[[i]] <-
# remove the last value of the vector, as PELT function indicates the last window as CP all the time
PELT_fixmw_out_2cp_param_diff.all[[i]]@cpts[-length(PELT_fixmw_out_2cp_param_diff.all[[i]]@cpts)]
}
# plot the location of CPs
for (i in 1:length(PELT_fixmw_out_2cp_param_diff.all)) {
plot(PELT_fixmw_out_2cp_param_diff.all[[i]], type="point", col = "black")
abline(v=PELT_fixmw_out_2cp_param_diff.all[[i]]@cpts[-length(PELT_fixmw_out_2cp_param_diff.all[[i]]@cpts)], col="black")
}
# detect the changepoints
BS_fixmw_send_2cp_param_diff.all <- list()
for (i in 1:length(fixmw_out_2cp_param_diff.all)) {
BS_fixmw_send_2cp_param_diff.all[[i]] <- cpt.meanvar(fixmw_send_2cp_param_diff.all[[i]], method="BinSeg")
}
# location of the changepoints
locat_BS_2cp_send_diff.all <- list()
for (i in 1:length(BS_fixmw_send_2cp_param_diff.all)) {
locat_BS_2cp_send_diff.all[[i]] <-
# remove the last value of the vector, as BS function indicates the last window as CP all the time
BS_fixmw_send_2cp_param_diff.all[[i]]@cpts[-length(BS_fixmw_send_2cp_param_diff.all[[i]]@cpts)]
}
# plot the location of CPs
for (i in 1:length(BS_fixmw_send_2cp_param_diff.all)) {
plot(BS_fixmw_send_2cp_param_diff.all[[i]], type="point", col = "black")
abline(v=BS_fixmw_send_2cp_param_diff.all[[i]]@cpts[-length(BS_fixmw_send_2cp_param_diff.all[[i]]@cpts)], col="black")
}
# detect the changepoints
BS_fixmw_diff_2cp_param_diff.all <- list()
for (i in 1:length(fixmw_out_2cp_param_diff.all)) {
BS_fixmw_diff_2cp_param_diff.all[[i]] <- cpt.meanvar(fixmw_diff_2cp_param_diff.all[[i]], method="BinSeg")
}
# location of the changepoints
locat_BS_2cp_diff_diff.all <- list()
for (i in 1:length(BS_fixmw_diff_2cp_param_diff.all)) {
locat_BS_2cp_diff_diff.all[[i]] <-
# remove the last value of the vector, as BS function indicates the last window as CP all the time
BS_fixmw_diff_2cp_param_diff.all[[i]]@cpts[-length(BS_fixmw_diff_2cp_param_diff.all[[i]]@cpts)]
}
# plot the location of CPs
for (i in 1:length(BS_fixmw_diff_2cp_param_diff.all)) {
plot(BS_fixmw_diff_2cp_param_diff.all[[i]], type="point", col = "black")
abline(v=BS_fixmw_diff_2cp_param_diff.all[[i]]@cpts[-length(BS_fixmw_diff_2cp_param_diff.all[[i]]@cpts)], col="black")
}
# detect the changepoints
BS_fixmw_ine_2cp_param_diff.all <- list()
for (i in 1:length(fixmw_out_2cp_param_diff.all)) {
BS_fixmw_ine_2cp_param_diff.all[[i]] <- cpt.meanvar(fixmw_ine_2cp_param_diff.all[[i]], method="BinSeg")
}
# location of the changepoints
locat_BS_2cp_ine_diff.all <- list()
for (i in 1:length(BS_fixmw_ine_2cp_param_diff.all)) {
locat_BS_2cp_ine_diff.all[[i]] <-
# remove the last value of the vector, as BS function indicates the last window as CP all the time
BS_fixmw_ine_2cp_param_diff.all[[i]]@cpts[-length(BS_fixmw_ine_2cp_param_diff.all[[i]]@cpts)]
}
# plot the location of CPs
for (i in 1:length(BS_fixmw_ine_2cp_param_diff.all)) {
plot(BS_fixmw_ine_2cp_param_diff.all[[i]], type="point", col = "black")
abline(v=BS_fixmw_ine_2cp_param_diff.all[[i]]@cpts[-length(BS_fixmw_ine_2cp_param_diff.all[[i]]@cpts)], col="black")
}
# detect the changepoints
BS_fixmw_out_2cp_param_diff.all <- list()
for (i in 1:length(fixmw_out_2cp_param_diff.all)) {
BS_fixmw_out_2cp_param_diff.all[[i]] <- cpt.meanvar(fixmw_out_2cp_param_diff.all[[i]], method="BinSeg")
}
# location of the changepoints
locat_BS_2cp_out_diff.all <- list()
for (i in 1:length(BS_fixmw_out_2cp_param_diff.all)) {
locat_BS_2cp_out_diff.all[[i]] <-
# remove the last value of the vector, as BS function indicates the last window as CP all the time
BS_fixmw_out_2cp_param_diff.all[[i]]@cpts[-length(BS_fixmw_out_2cp_param_diff.all[[i]]@cpts)]
}
# plot the location of CPs
for (i in 1:length(BS_fixmw_out_2cp_param_diff.all)) {
plot(BS_fixmw_out_2cp_param_diff.all[[i]], type="point", col = "black")
abline(v=BS_fixmw_out_2cp_param_diff.all[[i]]@cpts[-length(BS_fixmw_out_2cp_param_diff.all[[i]]@cpts)], col="black")
}
BOCD_fixmw_send_3cp_param <- onlineCPD(fixmw_send_3cp_param, getR = T, optionalOutputs = T, truncRlim = 10^-4)
conf_matrix <- function(pred_CPs, # e.g. locat_BOCD_1cp_out_same.all
true_CPs, # a matrix, no. of col = no. of cp; row = acceptable detected cp
window_parameters # the window given parameters, e.g. fixmw_send_1cp_param
){
confusion_assign <- vector(mode='list', length = length(window_parameters))
leveling <- list()
confusionmatrix <- list()
for (i in 1:length(pred_CPs)) {
for (detect_cp in 0:length(pred_CPs[[i]])) {
if (sum(confusion_assign[[i]] == "TP") < ncol(true_CPs) && true_CPs != 0) { # updated restriction here
confusion_assign[[i]][detect_cp] <-
if (length(pred_CPs[[i]][detect_cp]) > 0 && pred_CPs[[i]][detect_cp] %in% true_CPs) {
"TP"
} else {
"NA"
}
} else {
confusion_assign[[i]][detect_cp] <- "FP"
}
FN <- list()
FN[[i]] <- ncol(true_CPs) - sum(confusion_assign[[i]] == "TP")
confusion_assign[[i]] <- c(confusion_assign[[i]], rep("FN", FN[[i]]))
level <- c("TP", "FP", "FN", "TN")
leveling[[i]] <- factor(confusion_assign[[i]], level)
confusionmatrix[[i]] <- table(leveling[[i]])
}
# combine all the confusion assignments from each dataset together
total_confusion <- unlist(confusion_assign)
total_leveling <- factor(total_confusion, level)
total_confusionmatrix <- table(total_leveling)
# True Positive Rate
# In all positive observations, what is the probability that the model correctly predicts the true positive
TPR <- total_confusionmatrix[["TP"]] /
(total_confusionmatrix[["TP"]] + total_confusionmatrix[["FN"]])
# Positive Predictive Value
# The CPD predicts a CP, what is the actual prob. it is a CP.
PPV <- total_confusionmatrix[["TP"]] /
(total_confusionmatrix[["TP"]] + total_confusionmatrix[["FP"]])
return(list(confusionmatrix = confusionmatrix,
total_confusionmatrix = total_confusionmatrix,
TPR = TPR,
PPV = PPV))
}
true_cp <- matrix(data = c(58, 59, 60, 61, 62, 63, 57, 56, 55, 54, 53), ncol = 1)
a <- conf_matrix(pred_CPs = locat_BOCD_1cp_ine, true_CPs = true_cp, window_parameters = fixmw_ine_1cp_param)
View(a)
true_cp <- matrix(data = 0)
a <- conf_matrix(pred_CPs = locat_BOCD_ncp_ine, true_CPs = true_cp, window_parameters = fixmw_ine_ncp_param)
View(a)
ncol(true_cp)
true_cp <- NA
ncol(true_cp)
conf_matrix <- function(pred_CPs, # e.g. locat_BOCD_1cp_out_same.all
true_CPs, # a matrix, no. of col = no. of cp; row = acceptable detected cp
window_parameters # the window given parameters, e.g. fixmw_send_1cp_param
){
confusion_assign <- vector(mode='list', length = length(window_parameters))
leveling <- list()
confusionmatrix <- list()
for (i in 1:length(pred_CPs)) {
if (ncol(true_CPs) > 0) {
for (detect_cp in 0:length(pred_CPs[[i]])) {
if (sum(confusion_assign[[i]] == "TP") < ncol(true_CPs)) { # add restriction here
confusion_assign[[i]][detect_cp] <-
if (length(pred_CPs[[i]][detect_cp]) > 0 && pred_CPs[[i]][detect_cp] %in% true_CPs) {
"TP"
} else {
"NA"
}
} else {
confusion_assign[[i]][detect_cp] <- "FP"
}
FN <- list()
FN[[i]] <- ncol(true_CPs) - sum(confusion_assign[[i]] == "TP")
confusion_assign[[i]] <- c(confusion_assign[[i]], rep("FN", FN[[i]]))
level <- c("TP", "FP", "FN", "TN")
leveling[[i]] <- factor(confusion_assign[[i]], level)
confusionmatrix[[i]] <- table(leveling[[i]])
} else { # if no true_CPs are present
confusion_assign[[i]] <- rep("FP", length(pred_CPs[[i]]))
confusionmatrix[[i]] <- table(factor(confusion_assign[[i]], level))
}
# combine all the confusion assignments from each dataset together
total_confusion <- unlist(confusion_assign)
total_leveling <- factor(total_confusion, level)
total_confusionmatrix <- table(total_leveling)
# True Positive Rate
# In all positive observations, what is the probability that the model correctly predicts the true positive
TPR <- total_confusionmatrix[["TP"]] /
(total_confusionmatrix[["TP"]] + total_confusionmatrix[["FN"]])
# Positive Predictive Value
# The CPD predicts a CP, what is the actual prob. it is a CP.
PPV <- total_confusionmatrix[["TP"]] /
(total_confusionmatrix[["TP"]] + total_confusionmatrix[["FP"]])
return(list(confusionmatrix = confusionmatrix,
total_confusionmatrix = total_confusionmatrix,
TPR = TPR,
PPV = PPV))
}
true_cp <- NA
a <- conf_matrix(pred_CPs = locat_BOCD_ncp_ine, true_CPs = true_cp, window_parameters = fixmw_ine_ncp_param)
true_cp <- matrix(,ncol = 0)
true_cp <- matrix(, nrow = 1, ncol = 0)
a <- conf_matrix(pred_CPs = locat_BOCD_ncp_ine, true_CPs = true_cp, window_parameters = fixmw_ine_ncp_param)
conf_matrix <- function(pred_CPs, # e.g. locat_BOCD_1cp_out_same.all
true_CPs, # a matrix, no. of col = no. of cp; row = acceptable detected cp
window_parameters # the window given parameters, e.g. fixmw_send_1cp_param
){
confusion_assign <- vector(mode='list', length = length(window_parameters))
leveling <- list()
confusionmatrix <- list()
for (i in 1:length(pred_CPs)) {
if (ncol(true_CPs) > 0) {
for (detect_cp in 0:length(pred_CPs[[i]])) {
if (sum(confusion_assign[[i]] == "TP") < ncol(true_CPs)) { # add restriction here
confusion_assign[[i]][detect_cp] <-
if (length(pred_CPs[[i]][detect_cp]) > 0 && pred_CPs[[i]][detect_cp] %in% true_CPs) {
"TP"
} else {
"NA"
}
} else {
confusion_assign[[i]][detect_cp] <- "FP"
}
FN <- list()
FN[[i]] <- ncol(true_CPs) - sum(confusion_assign[[i]] == "TP")
confusion_assign[[i]] <- c(confusion_assign[[i]], rep("FN", FN[[i]]))
level <- c("TP", "FP", "FN", "TN")
leveling[[i]] <- factor(confusion_assign[[i]], level)
confusionmatrix[[i]] <- table(leveling[[i]])
} else { # if no true_CPs are present
confusion_assign[[i]] <- rep("FP", length(pred_CPs[[i]]))
level <- c("TP", "FP", "FN", "TN")
leveling[[i]] <- factor(confusion_assign[[i]], level)
confusionmatrix[[i]] <- table(leveling[[i]])
}
# combine all the confusion assignments from each dataset together
total_confusion <- unlist(confusion_assign)
total_leveling <- factor(total_confusion, level)
total_confusionmatrix <- table(total_leveling)
# True Positive Rate
# In all positive observations, what is the probability that the model correctly predicts the true positive
TPR <- total_confusionmatrix[["TP"]] /
(total_confusionmatrix[["TP"]] + total_confusionmatrix[["FN"]])
# Positive Predictive Value
# The CPD predicts a CP, what is the actual prob. it is a CP.
PPV <- total_confusionmatrix[["TP"]] /
(total_confusionmatrix[["TP"]] + total_confusionmatrix[["FP"]])
return(list(confusionmatrix = confusionmatrix,
total_confusionmatrix = total_confusionmatrix,
TPR = TPR,
PPV = PPV))
}
true_cp <- matrix(, nrow = 1, ncol = 0)
a <- conf_matrix(pred_CPs = locat_BOCD_ncp_ine, true_CPs = true_cp, window_parameters = fixmw_ine_ncp_param)
View(a)
conf_matrix <- function(pred_CPs, # e.g. locat_BOCD_1cp_out_same.all
true_CPs, # a matrix, no. of col = no. of cp; row = acceptable detected cp
window_parameters # the window given parameters, e.g. fixmw_send_1cp_param
){
confusion_assign <- vector(mode='list', length = length(window_parameters))
leveling <- list()
confusionmatrix <- list()
for (i in 1:length(pred_CPs)) {
if (ncol(true_CPs) > 0) {
for (detect_cp in 0:length(pred_CPs[[i]])) {
if (sum(confusion_assign[[i]] == "TP") < ncol(true_CPs)) { # add restriction here
confusion_assign[[i]][detect_cp] <-
if (length(pred_CPs[[i]][detect_cp]) > 0 && pred_CPs[[i]][detect_cp] %in% true_CPs) {
"TP"
} else {
"NA"
}
} else {
confusion_assign[[i]][detect_cp] <- "FP"
}
FN <- list()
FN[[i]] <- ncol(true_CPs) - sum(confusion_assign[[i]] == "TP")
confusion_assign[[i]] <- c(confusion_assign[[i]], rep("FN", FN[[i]]))
confusion_assign[[i]] <- c(confusion_assign[[i]],
rep("TN",
length(window_parameters[[i]]) - length(confusion_assign[[i]])))
level <- c("TP", "FP", "FN", "TN")
leveling[[i]] <- factor(confusion_assign[[i]], level)
confusionmatrix[[i]] <- table(leveling[[i]])
} else {
# if no true_CPs are present
confusion_assign[[i]] <- rep("FP", length(pred_CPs[[i]]))
confusion_assign[[i]] <- c(confusion_assign[[i]],
rep("TN",
length(window_parameters[[i]]) - length(confusion_assign[[i]])))
level <- c("TP", "FP", "FN", "TN")
leveling[[i]] <- factor(confusion_assign[[i]], level)
confusionmatrix[[i]] <- table(leveling[[i]])
}
# combine all the confusion assignments from each dataset together
total_confusion <- unlist(confusion_assign)
total_leveling <- factor(total_confusion, level)
total_confusionmatrix <- table(total_leveling)
# True Positive Rate
# In all positive observations, what is the probability that the model correctly predicts the true positive
TPR <- total_confusionmatrix[["TP"]] /
(total_confusionmatrix[["TP"]] + total_confusionmatrix[["FN"]])
# Positive Predictive Value
# The CPD predicts a CP, what is the actual prob. it is a CP.
PPV <- total_confusionmatrix[["TP"]] /
(total_confusionmatrix[["TP"]] + total_confusionmatrix[["FP"]])
return(list(confusionmatrix = confusionmatrix,
total_confusionmatrix = total_confusionmatrix,
TPR = TPR,
PPV = PPV))
}
true_cp <- matrix(, nrow = 1, ncol = 0)
a <- conf_matrix(pred_CPs = locat_BOCD_ncp_ine, true_CPs = true_cp, window_parameters = fixmw_ine_ncp_param)
View(a)
View(fixmw_ine_1cp_param)
View(fixmw_ine_ncp_param)
detected_MSE <- matrix(0, ncol = 2, nrow = 1)
View(detected_MSE)
MSE_CPD <- function(pred_CPs,# e.g. locat_BOCD_1cp_out_same.all
true_CPs # a vector
#range # the acceptable range of detexted CPs
){
single_MSE <- 0 # create an blank vector for storing
initial_MSE <- list()
for (i in 1:length(pred_CPs)) {
for (cp_det in 1:length(pred_CPs[[i]])) {
for (cp_true in 1: length(true_CPs)) {
if(length(pred_CPs[[i]]) > 0){
detected_MSE[cp_det,cp_num] <- (true_CPs[cp_num] - pred_CPs[[i]])^2
initial_MSE[[i]] <- min(detected_MSE[,cp_num])
}
return(initial_MSE = initial_MSE)
}
MSE_CPD(pred_CPs = locat_BOCD_1cp_ine, true_CPs = 57)
MSE_CPD <- function(pred_CPs,# e.g. locat_BOCD_1cp_out_same.all
true_CPs # a vector
#range # the acceptable range of detexted CPs
){
single_MSE <- 0 # create an blank vector for storing
initial_MSE <- list()
for (i in 1:length(pred_CPs)) {
for (cp_det in 1:length(pred_CPs[[i]])) {
for (cp_true in 1: length(true_CPs)) {
if(length(pred_CPs[[i]]) > 0){
detected_MSE[cp_det,cp_true] <- (true_CPs[cp_num] - pred_CPs[[i]])^2
initial_MSE[[i]] <- min(detected_MSE[,cp_num])
}
return(initial_MSE = initial_MSE)
}
MSE_CPD(pred_CPs = locat_BOCD_1cp_ine, true_CPs = 57)
MSE_CPD <- function(pred_CPs,# e.g. locat_BOCD_1cp_out_same.all
true_CPs # a vector
#range # the acceptable range of detexted CPs
){
single_MSE <- 0 # create an blank vector for storing
initial_MSE <- list()
for (i in 1:length(pred_CPs)) {
for (cp_det in 1:length(pred_CPs[[i]])) {
for (cp_true in 1: length(true_CPs)) {
if(length(pred_CPs[[i]]) > 0){
detected_MSE[cp_det,cp_true] <- (true_CPs[cp_true] - pred_CPs[[i]])^2
initial_MSE[[i]] <- min(detected_MSE[,cp_true])
}
return(initial_MSE = initial_MSE)
}
MSE_CPD(pred_CPs = locat_BOCD_1cp_ine, true_CPs = 57)
MSE_CPD <- function(pred_CPs, true_CPs){
initial_MSE <- list()
for (i in 1:length(pred_CPs)) {
if(length(pred_CPs[[i]]) > 0){
# Define dimensions of detected_MSE matrix
detected_MSE <- matrix(0, nrow = length(pred_CPs[[i]]), ncol = length(true_CPs))
for (cp_det in 1:length(pred_CPs[[i]])) {
for (cp_true in 1: length(true_CPs)) {
detected_MSE[cp_det,cp_true] <- (true_CPs[cp_true] - pred_CPs[[i]][cp_det])^2
}
# Find minimum MSE for each true CP
initial_MSE[[i]] <- apply(detected_MSE, 2, min)
} else {
initial_MSE[[i]] <- numeric(length(true_CPs))
}
return(initial_MSE)
}
MSE_CPD(pred_CPs = locat_BOCD_1cp_ine, true_CPs = 57)
c <- MSE_CPD(pred_CPs = locat_BOCD_1cp_ine, true_CPs = 57)
View(c)
c[[2]]
